--==== MOST PLAYED MAP (CAUTION: TAKES MUCH MEMORY) ====--
function parsemaps(str)
	table.insert(MapsList,str)
	return 1
end

MapsList = {}
addhook("log","parsemaps")
parse("maps")
freehook("log","parsemaps")
MapsList[1] = nil

function stat_mostmapplayed(id)
	IncreaseUserValue(id,"MapTimeByName_"..map("name"),1)
end

function stat_mostmapplayed_Compare(id)
	local str = stat_getmostplayedmap(id)
	if str == "none yet" then
		return(id)
	else
		return(GetUserValue(id,"MapTimeByName_"..str))
	end
	
end

function stat_getmostplayedmap(id)
	local maxMap = "none yet"
	local maxMapTime = 0
	for i, a in pairs (MapsList) do
		time = GetUserValue(id,"MapTimeByName_"..a)
		if (time > maxMapTime) then
			maxMap = a
			maxMapTime = time
		end
	end
	return(maxMap)
end

function stat_mostmapplayed_Variable(id)
	return(stat_getmostplayedmap(id))
end

function compareUSGNVariable(id)
	local maxMap = "none yet"
	local maxMapTime = 0
	for i, a in pairs (MapsList) do
		time = GetUserValue(id,"MapTimeByName_"..a)
		if (time > maxMapTime) then
			maxMap = a
			maxMapTime = time
		end
	end
	return(maxMapTime)
end

-- HOSTAGE RESQUE
function stat_hostagerescue(id)
	IncreaseUserValue(id,"HostagesRescued",1)
end

function stat_hostagerescue_Variable(id)
	return(GetUserValue(id,"HostagesRescued",1))
end
--==== FRIENDLY FIRE STATISTICS ====--
function stat_ff_hit(v,id,wpn,hp)
	if (player(id,"team") == player(v,"team")) then
		IncreaseUserValue(id,"FriendlyFire",hp)
	end
end

function stat_ff_Compare(id)
	return(GetUserValue(id,"FriendlyFire"))
end

function  stat_ff_Variable(id)
	return(stat_ff_Compare(id).." pts")
end

--==== ASSISTS STATISTICS ====--
function stat_assist_spawn(id)
	Assists[id] = {}
end

function stat_assist_hit(victim,attacker,wpn, hpdmg)
	if (player(attacker,"team") == player(victim,"team")) then
		return;
	end
	if (Assists[victim][attacker] == nil) then
		Assists[victim][attacker] = hpdmg
	else
		Assists[victim][attacker] = Assists[victim][attacker] + hpdmg
	end
end

function stat_assist_die(victim,killer)
	if (player(killer,"team") == player(victim,"team")) then
		return;
	end
	for i , k in pairs (Assists[victim]) do
		if (k > 30 and i ~= killer) then
			IncreaseUserValue(i,"Assists",1)
		end
	end
end

function stat_assist_start()
	for i = 1, 32 do
		Assists[i] = {}	
	end
end

function stat_assist_Compare(id)
	return(GetUserValue(id,"Assists"))
end

Assists = {}
stat_assist_start()

--==== FLASHBANG STATISTICS ====--
function sign (p1, p2, p3)
    return (p1.x - p3.x) * (p2.y - p3.y) - (p2.x - p3.x) * (p1.y - p3.y)
end

function PointInTriangle (pt, v1, v2, v3)
    local b1, b2, b3;
    b1 = sign(pt, v1, v2) < 0
    b2 = sign(pt, v2, v3) < 0
    b3 = sign(pt, v3, v1) < 0
    return ((b1 == b2) and (b2 == b3))
end

function distance(px,py,x,y)
	yS = px - x
	xS = py - y
	return(math.sqrt(yS*yS + xS*xS))
end

function stat_projectile(id,w,zx,zy)
	if (w == 52) then
		for m, p in pairs(player(0,"table")) do
			if (player(id,"team") ~= player(p,"team")) then
				local px = player(p,"x")
				local py = player(p,"y")
				local fx = zx
				local fy = zy
				if (pointInRect(zx,zy,px - 336,py - 256,640,480) == true) then
					local rot = math.atan2(fy - py, fx - px)
					local hit = 1
					while distance(fx,fy,px,py) > 4 do
						fx = fx - math.cos(rot) * 3
						fy = fy - math.sin(rot) * 3
						if (tile(math.ceil(fx / 32) - 1,math.ceil(fy / 32) - 1,"wall")) then
							hit = 0
						end
					end
					if (hit > 0) then
						IncreaseUserValue(id,"SuccessFlashbang",1)
					end
				end
			end
		end
	end
end

function stat_flash_Compare(id)
	return(GetUserValue(id,"SuccessFlashbang"))
end

--==== HE KILLS IN FOW
function stat_hesuceskills(id,victim, wpn)
	if (killer ~= victim and wpn == 51 and player(id,"health") > 0) then
		if tonumber(game("sv_fow")) < 1 then
			return
		end
		local fx = player(victim,"x")
		local fy = player(victim,"x")
		local px = player(id,"x")
		local py = player(id,"y")
		local rot = math.atan2(fy - py, fx - px)
		local hit = 1
		while distance(fx,fy,px,py) > 4 do
			fx = fx - math.cos(rot) * 3
			fy = fy - math.sin(rot) * 3
			if (tile(math.ceil(fx / 32) - 1,math.ceil(fy / 32) - 1,"wall")) then
				hit = 0
			end
		end
		if (hit < 1) then
			IncreaseUserValue(id,"HeInFow",1)
		end
	end
end

function stat_hefow_Compare(id)
	return(GetUserValue(id,"HeInFow"))
end

--==== Revenges
RevengeKills = {}
for p = 0, 32 do
	RevengeKills[p] = {}
	for i = 0, 32 do
		RevengeKills[p][i] = 0
	end
end

function stat_revenge_kills(killer,victim)
	RevengeKills[killer][victim] = RevengeKills[killer][victim] + 1
	if RevengeKills[victim][killer] > 0 then
		RevengeKills[victim][killer] = 0
		IncreaseUserValue(killer,"Revenge",1)
	end
end

function stat_revenge_team(id)
	for p = 0, 32 do
		RevengeKills[id][p] = 0
		RevengeKills[p][id] = 0
	end
end

function stat_revenge_Compare(id)
	return(GetUserValue(id,"Revenge"))
end


-- Favorite Look
function favoritelook_team(id,team,look)
	IncreaseUserValue(id,"Look"..team.."_"..look,1)
end
function favoritelook_variable(id)
	local maxLookID = 0
	local maxLookTeam = 0
	local maxLookCount = 0
	for team = 1, 2 do
		for lookid = 0, 3 do
			look = GetUserValue(id,"Look"..team.."_"..lookid)
			if (look > maxLookCount) then
				maxLookTeam = team
				maxLookCount = look
				maxLookID = lookid
			end
		end
	end
	if (maxLookTeam > 0) then
		StatsManager.data["Favorite Look"].image = "gfx/stats/stats/look"..maxLookTeam..""..(maxLookID+1)..".png<m>"
		return(FavoriteLookName[maxLookTeam][maxLookID+1])
	else
		StatsManager.data["Favorite Look"].image = "gfx/stats/stats/randomplayer.png<m>"
		return("Not Yet")
	end
end


-- Turret Kill Statistics
function turretKillVariable(id)
	return(GetUserValue(id,"TurretKill"))
end

function turretKill(id,vic,wpn)
	if wpn == 253 then
		IncreaseUserValue(id,"TurretKill",1)
	end
end

-- ==== Building Upgrades
function ObjectUpgradeStatistics(id,p,z,t)
	if (z == t) then
		IncreaseUserValue(p,"BuildingUpgrade",1)
	end
end

function BuildingsUpgradeVariable(id)
	return(GetUserValue(id,"BuildingUpgrade"))
end

-- ==== Build Building
function buildaturret_stat(id,type,x,y,mode)
	IncreaseUserValue(id,"BuildingBuilding",1)
end
function buildbuilding_variable(id)
	return(GetUserValue(id,"BuildingBuilding"))
end

-- ==== Last Time Played
function GetTimeStamp()
	local s = os.date("%b, %d %b %Y %X")
	local p="%a+, (%d+) (%a+) (%d+) (%d+):(%d+):(%d+)"
	local  day,month,year,hour,min,sec=s:match(p)
	local  MON={Jan=1,Feb=2,Mar=3,Apr=4,May=5,Jun=6,Jul=7,Aug=8,Sep=9,Oct=10,Nov=11,Dec=12}
	local  month=MON[month]
	return(os.time({day=day,month=month,year=year,hour=hour,min=min,sec=sec}))
end	

function timestempsecond(id)
	SetUserValue(id,"TimeStamp",GetTimeStamp())
end

function lasttimeplayed_Variable(id,extended)
	local stamp = GetUserValue(id,"TimeStamp")
	if stamp == 0 then
		return("none")
	end
	local new = GetTimeStamp() 
	if new - stamp < 3 then
		local p = GetPlayerID(id)
		local str = ""
		if p > 0 and extended then
			
			if userAchievementTopMenu.open[p] ~= nil then
				str = str.."Achievements Top"
			end   
			if userMenu.open[p] ~= nil then
				str = str.."Statistics Menu"
			end
			if userAchievementsMenu.open[p] then
				str = str.."Achievements Menu"
			end
			if userTopMenu.open[p] ~= nil  then
				str = str.."Stat: "..GetStatsByID(userTopMenu.StatID[p])
			end
			if userLeaderboard.open[p] ~= nil then
				str = str.."Leaderboard"
			end
			if str == "" then
				return("�170255170Online ")
			else
				return("�170255170Online ("..str..")")
			end
		elseif p < 1 then

		end
		return("�170255170Online ")
	end
	local seconds = os.difftime(new-stamp)
	if seconds < 60 then
		return((seconds % 60).." seconds ago")
	else
		local min = math.floor(seconds / 60) % 60
		if (math.floor(seconds / 60) == 1) then
			return("1 minute ago")
		else
			local str = (math.floor(seconds / 60) % 60).." minutes ago"
			if (seconds > 3600) then
				local h = math.floor(seconds / 3600)
				if h == 1 then
					str = "1 hour "..str
				else
					str = h.." hours "..str
				end
			end
			return(str)
		end
	end
	
end

function lasttimeplayed_Compare(id)
	return(GetUserValue(id,"TimeStamp"))
end

-- Achievements Unlocked
function AchievementsUnlockedVariable(id)
	local count = 0
	for m, p in pairs(AchievementsManager.sortedList) do
		if GetUserValue(id,"ACHIEVEMENT_"..GetAchievementValueByName(p)) > 1 then
			count = count + 1
		end
	end
	return(count)
end

-- ==== Marcell Achievement
function Marcell (id)
	local usgn = player(id, "usgn")
     if usgn == 6943 then
          OpenUnlockAchievement(id,"Marcell")
     end
end

AddFunction("join",Marcell)